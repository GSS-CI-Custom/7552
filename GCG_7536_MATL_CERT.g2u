Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Material Certificate Dashboard (7536)")
Gui.Form..Size(1222,555)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..MousePointer(0)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(True)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form.GSGCMain.Create(GsGridControl)
Gui.Form.GSGCMain.Enabled(True)
Gui.Form.GSGCMain.Visible(True)
Gui.Form.GSGCMain.Zorder(0)
Gui.Form.GSGCMain.Size(1216,485)
Gui.Form.GSGCMain.Position(3,37)
Gui.Form.GSGCMain.Anchor(15)
Gui.Form.GSGCMain.Event(RowCellClick,GSGCMain_RowCellClick)
Gui.Form.lblDateFrom.Create(Label,"From Receipt Date:",True,93,13,0,993,13,True,0,"Tahoma",8.25,,0,0)
Gui.Form.lblDateFrom.BorderStyle(0)
Gui.Form.lblDateFrom.Anchor(9)
Gui.Form.dtpFrom.Create(DatePicker)
Gui.Form.dtpFrom.Enabled(True)
Gui.Form.dtpFrom.Visible(True)
Gui.Form.dtpFrom.Zorder(0)
Gui.Form.dtpFrom.Size(100,20)
Gui.Form.dtpFrom.Position(1088,10)
Gui.Form.dtpFrom.CheckBox(False)
Gui.Form.dtpFrom.FontName("Tahoma")
Gui.Form.dtpFrom.FontSize(8.25)
Gui.Form.dtpFrom.Anchor(9)
Gui.Form.cmdRefresh.Create(Button)
Gui.Form.cmdRefresh.Enabled(True)
Gui.Form.cmdRefresh.Visible(True)
Gui.Form.cmdRefresh.Zorder(0)
Gui.Form.cmdRefresh.Size(20,20)
Gui.Form.cmdRefresh.Position(1194,10)
Gui.Form.cmdRefresh.Caption("REFRESH")
Gui.Form.cmdRefresh.FontName("Tahoma")
Gui.Form.cmdRefresh.FontSize(8.25)
Gui.Form.cmdRefresh.Event(Click,cmdRefresh_Click)
Gui.Form.cmdRefresh.Anchor(9)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.sUserName.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sFromDate.Declare(String)
V.Local.dDefaultDate.Declare(String)
		

F.ODBC.Connection!conx.OpenCommonConnection
F.Intrinsic.String.Build("Select (RTRIM(FIRST_NAME) + ' ' + RTRIM(LAST_NAME)) from USER_INFORMATION where GS_USER = '{0}'", V.Caller.User, V.Local.sSql)
F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sSql, V.Global.sUserName)
F.ODBC.Connection!conx.Close
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
	
	Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout
	
	V.Local.sUserName.Declare(String)
	V.Local.Sql.Declare(String)
	V.Local.dDefaultDate.Declare(Date)
	V.Local.sFromDate.Declare(String)
	
	F.Intrinsic.Control.SelectCase(V.Caller.Hook)
		
		'PO Receipts Post_OK hook
		F.Intrinsic.Control.Case(15040)
			F.Intrinsic.Control.CallSub(ValidateReceipt)
			
		F.Intrinsic.Control.CaseElse
			'Set from date for last 3 months by default
			F.Intrinsic.Date.DateAdd("M", -3, V.Ambient.Date, V.Local.dDefaultDate)
			F.Intrinsic.String.Format(V.Local.dDefaultDate, "D/M/YYYY", V.Local.sFromDate)
			GUI.Form.dtpFrom.Value(V.Local.sFromDate)
			
			F.Intrinsic.Control.CallSub(SetContextMenu)
			F.Intrinsic.Control.CallSub(cmdRefresh_Click)
			GUI.Form..Show
			
	F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.LoadData.Start
F.Intrinsic.Control.Try

	V.Local.sSql.Declare(String)
	V.Local.sFromDate.Declare(String)
	
	V.Local.sFromDate.Set(V.Screen.Form!dtpFrom.Value)
	
	F.Intrinsic.Control.CallSub(ODBC)
	
	'Select data from GCG_7536_MATL_CERT
	F.Intrinsic.String.Build("Select RTRIM(PO) PO, RTRIM(PO_LINE) PO_LINE, RTRIM(NAME_VENDOR) NAME_VENDOR, RTRIM(PART) PART, RTRIM(PART_DESC) PART_DESC, IF (SUBSTRING (RECEIPT_DATE ,1 ,2 )<= '99' AND SUBSTRING (RECEIPT_DATE ,1 ,2 )>= '00' AND SUBSTRING (RECEIPT_DATE ,3 ,2 )<= '12' AND SUBSTRING (RECEIPT_DATE ,3 ,2 )>= '01' AND SUBSTRING (RECEIPT_DATE ,5 ,2 )<= '31' AND SUBSTRING (RECEIPT_DATE ,5 ,2 )>= '01' ,IF (SUBSTRING (RECEIPT_DATE ,1 ,2 )< '80' ,CONVERT ('20' +SUBSTRING (RECEIPT_DATE ,1 ,2 )+'-' +SUBSTRING (RECEIPT_DATE ,3 ,2 )+'-' +SUBSTRING (RECEIPT_DATE ,5 ,2 ),SQL_DATE ),CONVERT ('19' +SUBSTRING (RECEIPT_DATE ,1 ,2 )+'-' +SUBSTRING (RECEIPT_DATE ,3 ,2 )+'-' +SUBSTRING (RECEIPT_DATE ,5 ,2 ),SQL_DATE )),CONVERT ('1900-01-01' ,SQL_DATE ))RECEIPT_DATE_FORMAT, RTRIM(RECEIVER) RECEIVER, RTRIM(LOT) LOT, RTRIM(BIN) BIN, RTRIM(HEAT) HEAT, RTRIM(QTY) QTY, RTRIM(RECEIVED_BY) RECEIVED_BY, IF (SUBSTRING (EXPIRY_DATE ,5 ,4 )>= '1900' AND SUBSTRING (EXPIRY_DATE ,5 ,4 )<= '2999' AND SUBSTRING (EXPIRY_DATE ,1 ,2 )<= '12' AND SUBSTRING (EXPIRY_DATE ,1 ,2 )>= '01' AND SUBSTRING (EXPIRY_DATE ,3 ,2 )<= '31' AND SUBSTRING (EXPIRY_DATE ,3 ,2 )>= '01' ,CONVERT (SUBSTRING (EXPIRY_DATE ,5 ,4 )+'-' +SUBSTRING (EXPIRY_DATE ,1 ,2 )+'-' +SUBSTRING (EXPIRY_DATE ,3 ,2 ),SQL_DATE ),CONVERT ('1900-01-01' ,SQL_DATE ))EXPIRY_DATE, RTRIM(BOX) BOX, RTRIM(OASIS_BARCODE) OASIS_BARCODE, RTRIM(NOTES) NOTES, CAST(ARCHIVE_DATE as DATE) ARCHIVE_DATE, RTRIM(ARCHIVED_BY) ARCHIVED_BY, CAST(ARCHIVED as BIT) ARCHIVED from GCG_7536_MATL_CERT where RECEIPT_DATE_FORMAT >= '{0}'", V.Local.sFromDate.PervasiveDate, V.Local.sSql)
	
	'Close table if already opened
	F.Intrinsic.Control.If(V.DataTable.dtAll.Exists)
		F.Data.Datatable.Close("dtAll")
	F.Intrinsic.Control.EndIf
	
	'Create table from sql
	F.Data.Datatable.CreateFromSQL("dtAll", "con", V.Local.sSql, True)
	F.Data.Datatable.AddColumn("dtAll", "CLOSE", "String", "Close")
	
	F.Intrinsic.Control.CallSub(FormatGrid)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.LoadData.End

Program.Sub.FormatGrid.Start
F.Intrinsic.Control.Try
	
	V.Local.sColumns.Declare(String)
	V.Local.iCount.Declare(Long)
	V.Local.iBoxInd.Declare(Long)
	V.Local.iBarInd.Declare(Long)

	GUI.Form.GSGCMain.AddGridviewFromDatatable("gvAll", "dtAll")
	
	GUI.Form.GSGCMain.Visible(False)
	GUI.Form.GSGCMain.SuspendLayout()
	
	GUI.Form.GSGCMain.SetGridviewProperty("gvAll", V.Enum.GridViewPropertyNames!ColumnAutoWidth, False)
	
	F.Intrinsic.String.Split(V.DataTable.dtAll.FieldNames, "*!*", V.Local.sColumns)
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.sColumns.UBound, 1)
		GUI.Form.GSGCMain.SetColumnProperty("gvAll", V.Local.sColumns(V.Local.iCount), "HeaderFontBold", True)
		GUI.Form.GSGCMain.SetColumnProperty("gvAll", V.Local.sColumns(V.Local.iCount), "ReadOnly", True)
		GUI.Form.GSGCMain.SetColumnProperty("gvAll", V.Local.sColumns(V.Local.iCount), "AllowEdit", False)
		GUI.Form.GSGCMain.SetColumnProperty("gvAll", V.Local.sColumns(V.Local.iCount), "HeaderHAlignment", Center)
		GUI.Form.GSGCMain.SetColumnProperty("gvAll", V.Local.sColumns(V.Local.iCount), "CellHAlignment", Center)
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'Set captions
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO", "Caption", "PO")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO_LINE", "Caption", "PO Line")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NAME_VENDOR", "Caption", "Vendor")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PART", "Caption", "Part")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PART_DESC", "Caption", "Part Desc")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIPT_DATE_FORMAT", "Caption", "Receipt Date")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIVER", "Caption", "Receiver")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "LOT", "Caption", "Lot")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BIN", "Caption", "Bin")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "HEAT", "Caption", "Heat")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "QTY", "Caption", "Qty")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIVED_BY", "Caption", "Received By")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "EXPIRY_DATE", "Caption", "Expiry Date")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BOX", "Caption", "Box")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "OASIS_BARCODE", "Caption", "Oasis Barcode")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NOTES", "Caption", "Notes")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVE_DATE", "Caption", "Archive Date")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVED_BY", "Caption", "Archive By")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVED", "Caption", "Archived")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "CLOSE", "ShowCaption", False)
	
	'Allow edit on individual columns
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "OASIS_BARCODE", "ReadOnly", False)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "OASIS_BARCODE", "AllowEdit", True)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NOTES", "ReadOnly", False)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NOTES", "AllowEdit", True)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BOX", "ReadOnly", False)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BOX", "AllowEdit", True)
	
	'Format date columns
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIPT_DATE_FORMAT", "DisplayCustomDateTime", "d")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "EXPIRY_DATE", "DisplayCustomDateTime", "d")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVE_DATE", "DisplayCustomDateTime", "d")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "EXPIRY_DATE", "SuppressNothingDates", True)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIPT_DATE_FORMAT", "SuppressNothingDates", True)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVE_DATE", "SuppressNothingDates", True)
	
	'Format editable column color
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BOX", "CellBackColor", "LightYellow")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NOTES", "CellBackColor", "LightYellow")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "OASIS_BARCODE", "CellBackColor", "LightYellow")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVE_DATE", "CellBackColor", "LightYellow")
	
	'Set fixed columns
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO", "Fixed", "Left")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO_LINE", "Fixed", "Left")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "LOT", "Fixed", "Left")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIVER", "Fixed", "Left")

	'Set default column widths
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PO_LINE", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NAME_VENDOR", "Width", 179)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PART", "Width", 100)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "PART_DESC", "Width", 196)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIPT_DATE_FORMAT", "Width", 110)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIVER", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "LOT", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BIN", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "HEAT", "Width", 89)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "QTY", "Width", 84)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "RECEIVED_BY", "Width", 107)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "EXPIRY_DATE", "Width", 110)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "BOX", "Width", 97)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "OASIS_BARCODE", "Width", 121)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "NOTES", "Width", 250)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVE_DATE", "Width", 110)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVED_BY", "Width", 107)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "ARCHIVED", "Width", 75)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "CLOSE", "Width", 75)
	
	GUI.Form.GSGCMain.ColumnEdit("gvAll","CLOSE","EditorButton","Close")
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "CLOSE", "AllowShowHide", False)
	GUI.Form.GSGCMain.SetColumnProperty("gvAll", "CLOSE", "AllowMove", False)
	

	'Capture index for columns to lock
	GUI.Form.GSGCMain.GetColumnIndexByName("gvAll", "BOX", V.Local.iBoxInd)
	GUI.Form.GSGCMain.GetColumnIndexByName("gvAll", "OASIS_BARCODE", V.Local.iBarInd)
	'Loop and lock rows if already closed
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.DataTable.dtAll.RowCount--, 1)
		F.Intrinsic.Control.If(V.DataTable.dtAll(V.Local.iCount).ARCHIVED!FieldVal)
			GUI.Form.GSGCMain.SetCellProperty("gvAll", V.Local.iBoxInd, V.Local.iCount, "Locked", True)
			GUI.Form.GSGCMain.SetCellProperty("gvAll", V.Local.iBarInd, V.Local.iCount, "Locked", True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'Set main view and resume layout
	GUI.Form.GSGCMain.MainView("gvAll")
	F.Intrinsic.Control.CallSub(Deserialize)
	GUI.Form.GSGCMain.ResumeLayout()
	GUI.Form.GSGCMain.Visible(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.FormatGrid.End

Program.Sub.ValidateReceipt.Start
F.Intrinsic.Control.Try

	V.Local.sPO.Declare(String)
	V.Local.sSql.Declare(String)
	V.Local.sRet.Declare(String)
	V.Local.sToday.Declare(String)
	V.Local.sTime.Declare(String)
	V.Local.sHeaders.Declare(String)
	V.Local.dTime.Declare(Date)
	V.Local.iRowCount.Declare(Long)
	V.Local.iPOLineInd.Declare(Long)
	V.Local.iReceivedInd.Declare(Long)
	V.Local.iCount.Declare(Long)
	V.Local.sRowRet.Declare(String)
	V.Local.sPOLine.Declare(String)
	V.Local.sPart.Declare(String)
	V.Local.sQtyReceived.Declare(String)
	V.Local.sUserName.Declare(String)

	'Open company connection
	F.Intrinsic.Control.CallSub(ODBC)

	'Create blank table to save
	F.Data.Datatable.CreateFromSQL("dtToSave", "con", "Select * from GCG_7536_MATL_CERT where 1 = 2")

	'Load PO Receipt BDF
	F.Intrinsic.BDF.Load("bdfPOReceipts", "AUX001")
	F.Intrinsic.BDF.ReadRowCount("bdfPOReceipts", V.Local.iRowCount)
	F.Intrinsic.Math.Sub(V.Local.iRowCount, 1, V.Local.iRowCount)
	
	'Find needed BDF column indexe for PO line
	F.Intrinsic.BDF.ReadColumnTitle("bdfPOReceipts", V.Local.sHeaders)
	F.Intrinsic.Control.CallSub(FindIndexBDF, "argHeaders", V.Local.sHeaders, "argCol", "Ln")
	V.Local.iPOLineInd.Set(V.Args.rIndex)
	F.Intrinsic.Control.CallSub(FindIndexBDF, "argHeaders", V.Local.sHeaders, "argCol", "Received")
	V.Local.iReceivedInd.Set(V.Args.rIndex)
	
	'Format passed PO number to 7 digits, todays date, and current time -2 minutes
	F.Intrinsic.String.LPad(V.Passed.000002, "0", 7, V.Local.sPO)
	F.Intrinsic.String.Format(V.Ambient.Date, "YYMMDD", V.Local.sToday)
	F.Intrinsic.Date.DateAdd("N", -2, V.Ambient.Time, V.Local.dTime)
	F.Intrinsic.String.Format(V.Local.dTime, "HHNNSSss", V.Local.sTime)
	
	'Loop bdf and check for PO lines received from inspection to inventory
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.iRowCount)
		'Verify current line was received into, if not jump to next in line
		F.Intrinsic.BDF.TextMatrix("bdfPOReceipts", V.Local.iReceivedInd, V.Local.iCount, V.Local.sQtyReceived)
		F.Intrinsic.Control.If(V.Local.sQtyReceived, >, 0)
		
			'Capture current PO line and format to 4 digits
			F.Intrinsic.BDF.TextMatrix("bdfPOReceipts", V.Local.iPOLineInd, V.Local.iCount, V.Local.sPOLine)
			F.Intrinsic.String.LPad(V.Local.sPOLine, "0", 3, V.Local.sPOLine)
			F.Intrinsic.String.Build("{0}0", V.Local.sPOLine, V.Local.sPOLine)
			
			'Query ITEM_HISTORY for a receipt from Inspection (transaction code P11) for current PO-POLine that happened within the last 2 minutes
			F.Intrinsic.String.Build("select TOP 1 RTRIM(A.PURCHASE_ORDER) PO, RTRIM(A.PO_LINE) PO_LINE, RTRIM(D.NAME_VENDOR) NAME_VENDOR, RTRIM(A.PART) PART, RTRIM(C.DESCRIPTION) PART_DESC, RTRIM(A.DATE_HISTORY) RECEIPT_DATE, RTRIM(A.RECEIVER) RECEIVER, RTRIM(A.LOT) LOT, RTRIM(A.BIN) BIN, RTRIM(A.HEAT) HEAT, CAST(A.QUANTITY as NUMERIC(8,2)) QTY, RTRIM(DATE_EXPIRATION) EXPIRY_DATE from ITEM_HISTORY A left join V_PO_LINES B on A.PURCHASE_ORDER = B.PURCHASE_ORDER and A.PO_LINE = B.RECORD_NO left join INVENTORY_MSTR C on A.PART = C.PART left join V_VENDOR_MASTER D on B.VENDOR = D.VENDOR where A.PURCHASE_ORDER = '{0}' and PO_LINE = '{1}' and A.DATE_HISTORY = '{2}' and A.CODE_TRANSACTION = 'P11' and TIME_ITEM_HISTORY > '{3}' order by A.DATE_HISTORY desc", V.Local.sPO, V.Local.sPOLine, V.Local.sToday, V.Local.sTime, V.Local.sSql)
			F.Data.Datatable.CreateFromSQL("dtReceivedFromInsp", "con", V.Local.sSql)
			
			'If return exists add row to table for saving
			F.Intrinsic.Control.If(V.DataTable.dtReceivedFromInsp.RowCount, >, 0)
				F.Data.Datatable.AddRow("dtToSave", "PO", V.DataTable.dtReceivedFromInsp(0).PO!FieldValTrim, "PO_LINE", V.DataTable.dtReceivedFromInsp(0).PO_LINE!FieldValTrim, "NAME_VENDOR", V.DataTable.dtReceivedFromInsp(0).NAME_VENDOR!FieldValTrim, "PART", V.DataTable.dtReceivedFromInsp(0).PART!FieldValTrim, "PART_DESC", V.DataTable.dtReceivedFromInsp(0).PART_DESC!FieldValTrim, "RECEIPT_DATE", V.DataTable.dtReceivedFromInsp(0).RECEIPT_DATE!FieldValTrim, "RECEIVER", V.DataTable.dtReceivedFromInsp(0).RECEIVER!FieldValTrim, "LOT", V.DataTable.dtReceivedFromInsp(0).LOT!FieldValTrim, "BIN", V.DataTable.dtReceivedFromInsp(0).BIN!FieldValTrim, "HEAT", V.DataTable.dtReceivedFromInsp(0).HEAT!FieldValTrim, "QTY", V.DataTable.dtReceivedFromInsp(0).QTY!FieldValTrim, "RECEIVED_BY", V.Global.sUserName, "EXPIRY_DATE", V.DataTable.dtReceivedFromInsp(0).EXPIRY_DATE!FieldValTrim)
				
			F.Intrinsic.Control.EndIf
			
			F.Data.Datatable.Close("dtReceivedFromInsp")
			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
	
	'If records were captured save table to DB
	F.Intrinsic.Control.If(V.DataTable.dtToSave.RowCount, >, 0)
		F.Data.Datatable.SaveToDB("dtToSave", "con", "GCG_7536_MATL_CERT", "RECEIVER", 256)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.ValidateReceipt.End

Program.Sub.ODBC.Start
F.Intrinsic.Control.If(V.ODBC.con.Exists)
	F.ODBC.Connection!con.Close
F.Intrinsic.Control.EndIf

F.ODBC.Connection!con.OpenCompanyConnection
Program.Sub.ODBC.End

Program.Sub.FindIndexBDF.Start
f.Intrinsic.Control.Try

	v.Local.sMsg.Declare(String)
	v.Local.sCol.Declare(String)
	v.Local.sHeaders.Declare(String)
	v.Local.iCount.Declare(String)
	
	v.Local.sCol.Set(v.Args.argCol)
	v.Local.sHeaders.Set(v.Args.argHeaders)
	
	f.Intrinsic.String.Split(v.Local.sHeaders,"*!*", v.Local.sHeaders)
	
	f.Intrinsic.Control.For(v.Local.iCount, 0, v.Local.sHeaders.UBound, 1)
		f.Intrinsic.Control.If(v.Local.sHeaders(v.Local.iCount).Trim,=,v.Local.sCol)
			f.Intrinsic.Variable.AddRV("rIndex", v.Local.iCount)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	
	F.Intrinsic.Variable.AddRV("rIndex", 9999)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.FindIndexBDF.End

Program.Sub.Catching.Start
V.Local.sError.Declare(String)
F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}",V.Caller.ScriptFile,V.Ambient.NewLine,v.Args.sub,V.Args.errorno,V.args.errordesc,V.Local.sError)
F.Intrinsic.UI.Msgbox(V.Local.sError,"Unhandled Exception")
F.Intrinsic.Control.If(V.ODBC.con.Exists)
	F.ODBC.Connection!con.Close
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.End
Program.Sub.Catching.End

Program.Sub.GSGCMain_RowCellClick.Start
F.Intrinsic.Control.Try

	V.Local.sRet.Declare(String)
	V.Local.iBoxInd.Declare(Long)
	V.Local.iBarInd.Declare(Long)
	V.Local.sPO.Declare(String)
	V.Local.sPoLine.Declare(String)
	V.Local.sLot.Declare(String)
	V.Local.sBin.Declare(String)
	V.Local.sReceiptDate.Declare(String)
	V.Local.sSql.Declare(String)
	V.Local.sArchiveDate.Declare(String)
	V.Local.sReceiver.Declare(String)
	V.Local.sBox.Declare(String)
	V.Local.sOasisBarcode.Declare(String)
	V.Local.sNotes.Declare(String)
	
	F.Intrinsic.Control.SelectCase(V.Args.Column)
		
		F.Intrinsic.Control.Case("CLOSE")
			'Verify record is not yet closed, then confirm close

			F.Intrinsic.Control.If(V.DataTable.dtAll(V.Args.RowIndex).ARCHIVED!FieldVal, =, 0)
				F.Intrinsic.UI.Msgbox("Are you sure you want to close this receipt?", "Close", V.Enum.MsgBoxStyle!YesNo, V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet, =, V.Ambient.MsgBoxYes)
					'Capture record info
					GUI.Form.GSGCMain.GetCellValueByColumnName("gvAll", "RECEIVER", V.Args.RowIndex, V.Local.sReceiver)
					GUI.Form.GSGCMain.GetCellValueByColumnName("gvAll", "BOX", V.Args.RowIndex, V.Local.sBox)
					GUI.Form.GSGCMain.GetCellValueByColumnName("gvAll", "OASIS_BARCODE", V.Args.RowIndex, V.Local.sOasisBarcode)
					GUI.Form.GSGCMain.GetCellValueByColumnName("gvAll", "NOTES", V.Args.RowIndex, V.Local.sNotes)
					
					'Validate Box
					V.Local.sBox.Set(V.Local.sBox.Trim)
					F.Intrinsic.Control.If(v.Local.sBox.Length, >, 4)
						F.Intrinsic.UI.Msgbox("Box number cannot exceed 4 characters, please try again")
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
					'Validate Oasis Barcode
					V.Local.sOasisBarcode.Set(V.Local.sOasisBarcode.Trim)
					F.Intrinsic.Control.If(v.Local.sOasisBarcode.Length, >, 12)
						F.Intrinsic.UI.Msgbox("Oasis Barcode number cannot exceed 12 characters, please try again")
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
					
					'Validate Notes
					V.Local.sNotes.Set(V.Local.sNotes.Trim)
					F.Intrinsic.Control.If(v.Local.sNotes.Length, >, 255)
						F.Intrinsic.UI.Msgbox("Notes cannot exceed 255 characters, please try again")
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf
						
					'Format date
					F.Intrinsic.String.Format(v.Ambient.Date, "M/D/YYYY", V.Local.sArchiveDate)
					
					'Update GCG_7536_MATL_CERT to archive record and set archived date
					F.Intrinsic.String.Build("Update GCG_7536_MATL_CERT set ARCHIVED = 1, ARCHIVE_DATE = '{0}', ARCHIVED_BY = '{1}', BOX = '{2}', OASIS_BARCODE = '{3}', NOTES = '{4}' where RECEIVER = '{5}'", V.Ambient.Now.PervasiveDate, V.Global.sUserName, V.Local.sBox.Trim, V.Local.sOasisBarcode.Trim, V.Local.sNotes.Trim, V.Local.sReceiver, V.Local.sSql)
					F.ODBC.Connection!con.Execute(V.Local.sSql)
					
					'Set record to archived and lock BOX and OASIS_BARCODE cells on record
					GUI.Form.GSGCMain.SetCellValueByColumnName("gvAll", "ARCHIVED", V.Args.RowIndex, 1)
					GUI.Form.GSGCMain.GetColumnIndexByName("gvAll", "BOX", V.Local.iBoxInd)
					GUI.Form.GSGCMain.GetColumnIndexByName("gvAll", "OASIS_BARCODE", V.Local.iBarInd)
					GUI.Form.GSGCMain.SetCellProperty("gvAll", V.Local.iBoxInd, V.Args.RowIndex, "Locked", True)
					GUI.Form.GSGCMain.SetCellProperty("gvAll", V.Local.iBarInd, V.Args.RowIndex, "Locked", True)
					
					'Set archive date and archived by cells to corresponding values
					GUI.Form.GSGCMain.SetCellValueByColumnName("gvAll", "ARCHIVE_DATE", V.Args.RowIndex, V.Local.sArchiveDate)
					GUI.Form.GSGCMain.SetCellValueByColumnName("gvAll", "ARCHIVED_BY", V.Args.RowIndex, V.Global.sUserName)
					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.GSGCMain_RowCellClick.End

Program.Sub.Form_UnLoad.Start
F.Intrinsic.Control.If(V.ODBC.con.Exists)
	F.ODBC.Connection!con.Close
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Serialize)
F.Intrinsic.Control.End
Program.Sub.Form_UnLoad.End

Program.Sub.cmdRefresh_Click.Start
F.Intrinsic.Control.CallSub(LoadData)
Program.Sub.cmdRefresh_Click.End

Program.Sub.Serialize.Start
F.Intrinsic.Control.Try

	V.Local.sSerialize.Declare(String)
	
	GUI.Form.GSGCMain.Serialize("gvAll",V.Local.sSerialize)
	
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"gvAll",7536,7536,False,"Serialize",False,0,0,V.Ambient.Date,V.Ambient.Time,V.Local.sSerialize)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
F.Intrinsic.Control.Try

	V.Local.sSerialize.Declare(String)
	
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"gvAll",7536,7536,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
		GUI.Form.GSGCMain.Deserialize(V.Local.sSerialize)
		
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.SetContextMenu.Start
F.Intrinsic.Control.Try

	'Create and attach context menu
	GUI.Form..ContextMenuCreate("ContextMenu")
	GUI.Form.GSGCMain.ContextMenuAttach("ContextMenu")
	'Export to Excel context menu
	GUI.Form..ContextMenuAddItem("ContextMenu", "Reset", 0, "Reset Grid Formatting")
	GUI.Form..ContextMenuSetItemEventHandler("ContextMenu", "Reset", "ResetFormatting")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenu.End

Program.Sub.ResetFormatting.Start
F.Intrinsic.Control.Try
	
	'Add blank registry value to reset formatting
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"gvAll",7536,7536,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,"")
	GUI.Form.GSGCMain.Visible(False)
	GUI.Form.GSGCMain.SuspendLayout()
	F.Intrinsic.Control.CallSub(cmdRefresh_Click)
	GUI.Form.GSGCMain.ResumeLayout
	GUI.Form.GSGCMain.Visible(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(Catching,"Sub",V.Ambient.CurrentSubroutine,"ErrorNo",V.Ambient.ErrorNumber,"ErrorDesc",V.Ambient.ErrorDescription) 
F.Intrinsic.Control.EndTry
Program.Sub.ResetFormatting.End

Program.Sub.Comments.Start
${$5$}$20.1.8286.22461$}$1
${$6$}$Angel$}$20240509093952118$}$KXl0r/FkrMYwb/r4ukQ87f+Hs/x2T/urQ0+Je1KkQtD9YieZ4LL5hZI/T3lpJxf6owU9x8mX8c0=
Program.Sub.Comments.End